// Copyright 2016, Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Google.Api.Ads.Common.Lib;

using System.Collections.Generic;
using System.Linq;

namespace Google.Api.Ads.Common.Logging {

  /// <summary>
  /// A utility class for tracking the usage of various features in the client
  /// library.
  /// </summary>
  public class AdsFeatureUsageRegistry {

    /// <summary>
    /// The key name to use when storing the feature usage registry in
    /// ContextStore.
    /// </summary>
    private const string FEATURE_USAGE_REGISTRY_KEY = "AdsFeatureUsageRegistry";

    /// <summary>
    /// The list of features we need to track.
    /// </summary>
    public enum Features {

      /// <summary>
      /// Default value.
      /// </summary>
      Unknown,

      /// <summary>
      /// Group of features used to build selectors in AdWords library. This
      /// includes extension methods in Paging, OrderBy and Predicate classes.
      /// </summary>
      SelectorBuilder,

      /// <summary>
      /// The selector field enums generated by stub code generator.
      /// </summary>
      SelectorField,

      /// <summary>
      /// All classes derived from AdsReportUtilities.
      /// </summary>
      ReportDownloader,

      /// <summary>
      /// ProductPartitionTree and associated classes in AdWords API.
      /// </summary>
      ProductPartitionTree,

      /// <summary>
      /// BatchJobUtilities and associated classes in AdWords API.
      /// </summary>
      BatchJobHelper,

      /// <summary>
      /// StatementBuilder class in DFP API.
      /// </summary>
      StatementBuilder,

      /// <summary>
      /// Classes that provide OAuth service account flow in AdWords and DFP API.
      /// </summary>
      OAuthServiceAccountFlow,

      /// <summary>
      /// Classes that provide OAuth installed application and web account flows
      /// in AdWords and DFP API.
      /// </summary>
      OAuthApplicationFlow,

      /// <summary>
      /// Classes that provide logging functionality.
      /// </summary>
      Logging,
    };

    /// <summary>
    /// Dictionary to keep track of feature usage.
    /// </summary>
    private Dictionary<Features, bool> featureUsageMap = new Dictionary<Features, bool>();

    /// <summary>
    /// Prevents a default instance of the <see cref="AdsFeatureUsageRegistry"/> class from being
    /// created.
    /// </summary>
    private AdsFeatureUsageRegistry() {
    }

    /// <summary>
    /// Gets the feature usage tracker instance.
    /// </summary>
    public static AdsFeatureUsageRegistry Instance {
      get {
        lock (FEATURE_USAGE_REGISTRY_KEY) {
          AdsFeatureUsageRegistry adsFeatureUsageRegistry =
              (AdsFeatureUsageRegistry) ContextStore.GetValue(FEATURE_USAGE_REGISTRY_KEY);

          if (adsFeatureUsageRegistry != null) {
            return adsFeatureUsageRegistry;
          }
          adsFeatureUsageRegistry = new AdsFeatureUsageRegistry();
          ContextStore.AddKey(FEATURE_USAGE_REGISTRY_KEY, adsFeatureUsageRegistry);
          return adsFeatureUsageRegistry;
        }
      }
    }

    /// <summary>
    /// Marks the usage of a feature.
    /// </summary>
    /// <param name="featureName">Name of the feature.</param>
    /// <exception cref="System.ArgumentException">If the feature is
    /// unregistered.</exception>
    public void MarkUsage(Features featureName) {
      lock (featureUsageMap) {
        featureUsageMap[featureName] = true;
      }
    }

    /// <summary>
    /// Clears the feature usage registry records.
    /// </summary>
    public void Clear() {
      lock (featureUsageMap) {
        featureUsageMap.Clear();
      }
    }

    /// <summary>
    /// Gets a comma separated list of features that have been used.
    /// </summary>
    public string Text {
      get {
        lock (featureUsageMap) {
          return string.Join<string>(", ", featureUsageMap.Keys
            .Where(key => featureUsageMap[key] == true)
            .Select(item => item.ToString())
            .OrderBy(item => item));
        }
      }
    }
  }
}
