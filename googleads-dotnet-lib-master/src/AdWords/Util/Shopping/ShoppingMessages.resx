<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdGroupCriterionNull" xml:space="preserve">
    <value>Ad group criterion cannot be null.</value>
    <comment>Used by ProductPartitionTree.CreateAdGroupTree if it finds a null ad group criteria in the list.</comment>
  </data>
  <data name="CannotSetBidOnNode" xml:space="preserve">
    <value>Cannot set bid on a {0} node.</value>
    <comment>Used by NodeState class for validation on BidInMicros property setter.</comment>
  </data>
  <data name="ChildNodeDoesNotExist" xml:space="preserve">
    <value>Attempted to remove child {0} but no such child exists.</value>
    <comment>Used by ProductPartitionNode.RemoveChild method for validating the child node.</comment>
  </data>
  <data name="ChildNodeExists" xml:space="preserve">
    <value>A child with dimension {0} already exists.</value>
    <comment>Used by ProductPartitionNode.AddChild method for validating the child node.</comment>
  </data>
  <data name="CriteriaListNull" xml:space="preserve">
    <value>Criteria list cannot be null when creating a ProductPartitionTree.</value>
    <comment>Used by ProductPartitionTree.CreateAdGroupTree if it finds a null ad group criteria list.</comment>
  </data>
  <data name="MoreThanOneRootFound" xml:space="preserve">
    <value>Product partition tree for ad group ID: {0} has more than one root node.</value>
    <comment>Used by ProductPartitionTree.CreateNonEmptyAdGroupTree when validating root node.</comment>
  </data>
  <data name="NewChildCannotBeNull" xml:space="preserve">
    <value>Dimension:{0} has children to process, but the new child is null.</value>
    <comment>Used by ProductPartitionTree.AddMutateOperationsByParent when validating newChild node.</comment>
  </data>
  <data name="NoChildNodeFoundForDimension" xml:space="preserve">
    <value>No child exists with dimension: {0}.</value>
    <comment>Used by ProductPartitionNode.GetChild if no matching child nodes were found for a given dimension.</comment>
  </data>
  <data name="NodeCannotBeNull" xml:space="preserve">
    <value>Node cannot be null.</value>
    <comment>Used by ProductPartitionNodeAdapter class for validating node parameter in various methods.</comment>
  </data>
  <data name="NodeForBidUpdateIsNotBiddable" xml:space="preserve">
    <value>Bid for node with partition ID:{0} is being updated, but it is not a biddable node.</value>
    <comment>Used by ProductPartitionNodeAdapter.CreateCriterionForSetBid method for validating node parameter.</comment>
  </data>
  <data name="NodeForRemoveCannotHaveNegativeId" xml:space="preserve">
    <value>Node for REMOVE operation has a negative partition ID: {0}.</value>
    <comment>Used by ProductPartitionTree.CreateRemoveBidOperation when validating nodes.</comment>
  </data>
  <data name="NodeForSetCannotHaveNegativeId" xml:space="preserve">
    <value>Node for SET operation has a negative partition ID: {0}.</value>
    <comment>Used by ProductPartitionTree.CreateSetBidOperation when validating nodes.</comment>
  </data>
  <data name="NonEmptyTreeWithoutRoot" xml:space="preserve">
    <value>No root criterion found in the tree but the tree is not empty.</value>
    <comment>Used by ProductPartitionTree.CreateAdGroupTree if it finds a tree that is non-empty, and without a root.</comment>
  </data>
  <data name="OriginalChildCannotBeNull" xml:space="preserve">
    <value>Dimension:{0} has children to process, but the original child is null.</value>
    <comment>Used by ProductPartitionTree.AddMutateOperationsByParent when validating originalChild node.</comment>
  </data>
  <data name="ParentIdMapEmpty" xml:space="preserve">
    <value>ParentIdMap passed for ad group ID {0} is empty.</value>
    <comment>Used by ProductPartitionTree.CreateNonEmptyAdGroupTree if parent ID map is empty.</comment>
  </data>
  <data name="ParentNodeIsNotSubdivision" xml:space="preserve">
    <value>Parent node {0} is not a SUBDIVISION. Call AsSubdivision before adding children to a node.</value>
    <comment>Used by ProductPartitionNode.AddChild method for validating the current node.</comment>
  </data>
  <data name="ProductDimensionMismatch" xml:space="preserve">
    <value>Original node and new node are not for the same product dimension. Old dimension: {0}, new dimension: {1}.</value>
    <comment>Used by ProductPartitionNodeDiffer.Diff if oldNode and newNode do not belong to the same product dimension.</comment>
  </data>
  <data name="RootCannotBeExcluded" xml:space="preserve">
    <value>The root node cannot be an excluded unit.</value>
    <comment>Used by ProductPartitionNode.AsExcludedUnit method for validating the node.</comment>
  </data>
  <data name="RootCriteriaNotFoundInCriteriaList" xml:space="preserve">
    <value>No root criterion found in the list of ad group criteria for ad group ID {0}.</value>
    <comment>Used by ProductPartitionTree.CreateNonEmptyAdGroupTree when validating parentMap.</comment>
  </data>
  <data name="RootCriterionIsNotBiddable" xml:space="preserve">
    <value>Root criterion for ad group ID {0} is not a BiddableAdGroupCriterion.</value>
    <comment>Used by ProductPartitionTree.CreateNonEmptyAdGroupTree when validating root node.</comment>
  </data>
  <data name="RootNodeCannotBeNull" xml:space="preserve">
    <value>Root node cannot be null.</value>
    <comment>Used by ProductPartitionTree constructor when validating root node parameter.</comment>
  </data>
  <data name="UnknownNodeType" xml:space="preserve">
    <value>Attempting to transition to unrecognized node type: {0}.</value>
    <comment>Used by NodeState.TransitionTo method for validating the node  type.</comment>
  </data>
  <data name="UserStatusNotSpecified" xml:space="preserve">
    <value>User status is not specified for criterion ID: {0}</value>
    <comment>Used by ProductPartitionTree.CreateAdGroupTree if it finds an ad group criterion without its user status specified.</comment>
  </data>
</root>